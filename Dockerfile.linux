ARG MKVTOOLNIX_BIN=mkvmerge

###################Stage 0: ######################
FROM cgdoc/mingw-w64-multilib:win32-v1.0 AS builder

ENV BUILD=x86_64-unknown-linux-gnu

#ENV MINGW32=x86_64-w64-mingw32-
ENV MINGW32=

ENV CC ${MINGW32}gcc
ENV CXX ${MINGW32}g++
ENV AR ${MINGW32}ar
ENV RANLIB ${MINGW32}ranlib
ENV STRIP ${MINGW32}strip
ENV LD ${MINGW32}ld
ENV OBJDUMP ${MINGW32}objdump
ENV AS ${MINGW32}as
ENV NM ${MINGW32}nm


ENV SRC=/opt/_src/

ENV MKVTOOLNIX_VER=47.0.0

ENV XZ_VER=5.2.5
ENV BZIP2_VER=1.0.6
ENV ZLIB_VER=1.2.11
ENV EXPAT_VER=2.2.9
ENV LIBICONV_VER=1.16
ENV BOOST_VER=1.60.0
ENV OGG_VER=1.3.4
ENV VORBIS_VER=1.3.6
ENV FLAC_VER=1.3.3
ENV FILE_VER=5.24
ENV PUGIXML_VER=1.9
ENV FMT_VER=6.2.1
ENV LIBEBML_VER=1.3.10
ENV LIBMATROSKA_VER=1.5.2
ENV GETTEXT_VER=0.20.2
ENV NLOHMANN_VER=3.8.0


RUN yum install -y libxslt docbook-style-xsl \
\
	&& mkdir -p $SRC && cd $SRC \
    && curl -L -O https://mkvtoolnix.download/sources/mkvtoolnix-$MKVTOOLNIX_VER.tar.xz \
\
	&& curl -L -O https://sourceforge.net/projects/lzmautils/files/xz-$XZ_VER.tar.bz2 \
	&& curl -L -O https://sourceware.org/pub/bzip2/bzip2-$BZIP2_VER.tar.gz \
	&& curl -L -O https://zlib.net/zlib-$ZLIB_VER.tar.xz \
	&& curl -L -O https://sourceforge.net/projects/expat/files/expat/$EXPAT_VER/expat-$EXPAT_VER.tar.bz2 \
	&& curl -L -O https://ftp.gnu.org/pub/gnu/libiconv/libiconv-$LIBICONV_VER.tar.gz \
	&& curl -L -o boost-$BOOST_VER.tar.bz2 https://sourceforge.net/projects/boost/files/boost/$BOOST_VER/boost_$(echo $BOOST_VER|sed 's/\./_/g').tar.bz2 \
	&& curl -L -O https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-$OGG_VER.tar.xz \
	&& curl -L -O https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-$VORBIS_VER.tar.xz \
	&& curl -L -O https://ftp.osuosl.org/pub/xiph/releases/flac/flac-$FLAC_VER.tar.xz \
	&& curl -L -o file-$FILE_VER.tar.gz https://github.com/file/file/archive/FILE$(echo $FILE_VER|sed 's/\./_/g').tar.gz \
	&& curl -L -O https://github.com/zeux/pugixml/releases/download/v$PUGIXML_VER/pugixml-$PUGIXML_VER.tar.gz \
	&& curl -L -o fmt-$FMT_VER.tar.gz https://github.com/fmtlib/fmt/archive/$FMT_VER.tar.gz \
	&& curl -L -O https://dl.matroska.org/downloads/libebml/libebml-$LIBEBML_VER.tar.xz \
	&& curl -L -O https://dl.matroska.org/downloads/libmatroska/libmatroska-$LIBMATROSKA_VER.tar.xz \
	&& curl -L -O https://ftp.gnu.org/pub/gnu/gettext/gettext-$GETTEXT_VER.tar.gz \
	&& curl -L -o nlohmann-json-$NLOHMANN_VER.zip https://github.com/nlohmann/json/releases/download/v$NLOHMANN_VER/include.zip \
\
	&& /bin/bash -c \
	'\
	cd $SRC; pkgs=$(ls|grep -e "\.gz$\|\.xz$\|\.bz2$\|\.zip$"); \
	for pkg in $pkgs; \
	do \
	    pkg_name=$(echo $pkg|sed -n "s/\(.\+\)\(\.tar\.gz\|\.tar\.xz\|\.tar\.bz2\|\.zip\)$/\1/p"); \
	    mkdir -p $pkg_name; \
	    case $pkg in \
	        *\.gz) \
	        tar zxvf $pkg -C $pkg_name --strip-components=1;; \
	        *\.xz) \
	        tar Jxvf $pkg -C $pkg_name --strip-components=1;; \
	        *\.bz2) \
	        tar jxvf $pkg -C $pkg_name --strip-components=1;; \
	        *\.zip) \
	        unzip $pkg -d $pkg_name;; \
	    esac; \
	done; \
	' \
	&& ln -s mkvtoolnix-$MKVTOOLNIX_VER mkvtoolnix
    
###################Stage 1: ######################
FROM builder AS build_i686

ARG MKVTOOLNIX_BIN

ARG HOST=i686-unknown-linux-gnu
#ARG HOST=x86_64-unknown-linux-gnu
#ARG HOST=i686-w64-mingw32
#ARG HOST=x86_64-w64-mingw32

ARG CFLAGS="-m32 -fstack-protector-strong"
ARG CXXFLAGS="-m32 -fstack-protector-strong"
ARG CPPFLAGS="-D_FILE_OFFSET_BITS=64"
ARG LDFLAGS="-m32 -fstack-protector-strong"

#ARG WINDRES_FLAGS="-F pe-i386"
#ARG DLLTOOL_FLAGS="-m i386"

#ENV WINDRES "${MINGW32}windres ${WINDRES_FLAGS}"
#ENV RC $WINDRES
#ENV DLLTOOL "${MINGW32}dlltool ${DLLTOOL_FLAGS}"

ARG BUILDROOT=/opt/linux
ARG PREFIX=$BUILDROOT/$HOST-build

ARG PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/

ARG CPPFLAGS="${CPPFLAGS} -I${PREFIX}/include"
ARG LDFLAGS="${LDFLAGS} -L${PREFIX}/lib"

RUN	mkdir -p $PREFIX $PKG_CONFIG_PATH \
\
	&& mkdir -p $BUILDROOT/xz-$XZ_VER && cd $BUILDROOT/xz-$XZ_VER \
	&& $SRC/xz-$XZ_VER/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes \
	&& make -C src/liblzma -j $(($(nproc) + 3)) install \
\
	&& mkdir -p $BUILDROOT/bzip2-$BZIP2_VER && cd $BUILDROOT/bzip2-$BZIP2_VER \
	&& sed -i 's/sys\\stat\.h/sys\/stat\.h/' $SRC/bzip2-$BZIP2_VER/bzip2.c \
	&& make -C $SRC/bzip2-$BZIP2_VER -j $(($(nproc) + 3)) PREFIX=$PREFIX CC=$CC AR=$AR RANLIB=$RANLIB CFLAGS="${CFLAGS} -Wall -Winline -O2 -D_FILE_OFFSET_BITS=64" libbz2.a \
	&& install -d $PREFIX/include $PREFIX/lib && install -m644 $SRC/bzip2-$BZIP2_VER/bzlib.h $PREFIX/include/ && install -m644 $SRC/bzip2-$BZIP2_VER/libbz2.a $PREFIX/lib/ \
\
	&& mkdir -p $BUILDROOT/zlib-$ZLIB_VER && cd $BUILDROOT/zlib-$ZLIB_VER \
	&& $SRC/zlib-$ZLIB_VER/configure --prefix=$PREFIX --static \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/expat-$EXPAT_VER && cd $BUILDROOT/expat-$EXPAT_VER \
	&& $SRC/expat-$EXPAT_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no --without-docbook \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libiconv-$LIBICONV_VER && cd $BUILDROOT/libiconv-$LIBICONV_VER \
	&& $SRC/libiconv-$LIBICONV_VER/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes --enable-shared=no --disable-nls \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& cd $SRC/boost-$BOOST_VER \
	&& echo "using gcc : mingw : ${MINGW32}g++ : <rc>\"$WINDRES\" <archiver>${MINGW32}ar <ranlib>${MINGW32}ranlib <cxxflags>\"${CXXFLAGS}\" <linkflags>\"${LDFLAGS}\" ;" > user-config.jam \
	&& cd tools/build && CXX=g++ CXXFLAGS= LDFLAGS= ./bootstrap.sh \
	&& cd ../../ && ./tools/build/b2 \
        -a \
        -q \
        -j $(($(nproc) + 3)) \
        --ignore-site-config \
        --user-config=user-config.jam \
		-sBOOST_ROOT=$SRC/boost-$BOOST_VER \
        abi=sysv \
        address-model=$([[ "$HOST" =~ "x86_64" ]] && echo "64" || echo "32") \
        architecture=x86 \
        binary-format=$([[ "$HOST" =~ "mingw" ]] && echo "pe" || echo "elf") \
        link=static \
        target-os=$([[ "$HOST" =~ "mingw" ]] && echo "windows" || echo "linux") \
        threadapi=$([[ "$HOST" =~ "mingw" ]] && echo "win32" || echo "pthread") \
        threading=multi \
		runtime-link=static \
        variant=release \
        toolset=gcc-mingw \
        optimization=speed \
        --layout=tagged \
        --disable-icu \
		boost.locale.iconv=on \
        --without-mpi \
        --without-python \
        --prefix=$PREFIX \
        --exec-prefix=$PREFIX/bin \
        --libdir=$PREFIX/lib \
        --includedir=$PREFIX/include \
        -sEXPAT_INCLUDE=$PREFIX/include \
        -sEXPAT_LIBPATH=$PREFIX/lib \
		-sZLIB_INCLUDE=$PREFIX/include \
		-sZLIB_LIBPATH=$PREFIX/lib \
		-sBZIP2_INCLUDE=$PREFIX/include \
		-sBZIP2_LIBPATH=$PREFIX/lib \
		-sLZMA_INCLUDE=$PREFIX/include \
		-sLZMA_LIBPATH=$PREFIX/lib \
		-sICONV_PATH=$PREFIX \
        install \
\
	&& mkdir -p $BUILDROOT/libogg-$OGG_VER && cd $BUILDROOT/libogg-$OGG_VER \
	&& $SRC/libogg-$OGG_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libvorbis-$VORBIS_VER && cd $BUILDROOT/libvorbis-$VORBIS_VER \
	&& $SRC/libvorbis-$VORBIS_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
		--with-ogg=$PREFIX --enable-docs=no \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/flac-$FLAC_VER && cd $BUILDROOT/flac-$FLAC_VER \
	&& $SRC/flac-$FLAC_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
		--enable-ogg --with-ogg=$PREFIX --disable-doxygen-docs --disable-xmms-plugin \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/file-$FILE_VER && cd $BUILDROOT/file-$FILE_VER \
	&& autoreconf -if $SRC/file-$FILE_VER \
	&& cp -rp $SRC/file-$FILE_VER file-$FILE_VER.native \
	&& cd file-$FILE_VER.native && CC=gcc AR=ar RANLIB=ranlib LD=ld CFLAGS= LDFLAGS= ./configure --disable-shared \
	&& make -j $(($(nproc) + 3)) \
	&& cd $BUILDROOT/file-$FILE_VER \
	&& CFLAGS="${CFLAGS} -DHAVE_PREAD" LDFLAGS="${LDFLAGS}" $SRC/file-$FILE_VER/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes --disable-silent-rules --disable-shared \
	&& make -j $(($(nproc) + 3)) FILE_COMPILE="$BUILDROOT/file-$FILE_VER/file-$FILE_VER.native/src/file" && make install \
\
	&& mkdir -p $BUILDROOT/pugixml-$PUGIXML_VER && cd $BUILDROOT/pugixml-$PUGIXML_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX $SRC/pugixml-$PUGIXML_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/fmt-$FMT_VER && cd $BUILDROOT/fmt-$FMT_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX -DFMT_DOC=OFF -DFMT_TEST=OFF $SRC/fmt-$FMT_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libebml-$LIBEBML_VER && cd $BUILDROOT/libebml-$LIBEBML_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DWIN32=OFF -DENABLE_WIN32_IO=OFF -DCMAKE_INSTALL_PREFIX=$PREFIX $SRC/libebml-$LIBEBML_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libmatroska-$LIBMATROSKA_VER && cd $BUILDROOT/libmatroska-$LIBMATROSKA_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX  -DCMAKE_PREFIX_PATH=$BUILDROOT $SRC/libmatroska-$LIBMATROSKA_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/gettext-$GETTEXT_VER && cd $BUILDROOT/gettext-$GETTEXT_VER \
	&& $SRC/gettext-$GETTEXT_VER/gettext-runtime/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes --enable-shared=no --enable-threads=posix \
	&& make -C intl -j $(($(nproc) + 3)) install \
\
	&& cd $SRC/nlohmann-json-$NLOHMANN_VER \
	## Use native C++ compiler to circumvent Meson's sanity check.
	&& CXX=g++ AR=ar STRIP=strip CXXFLAGS= LDFLAGS= meson --prefix=$PREFIX --libdir=lib builddir \
	&& ninja -C builddir install \
\
\
	&& cd $SRC/mkvtoolnix \
	&& ./configure --enable-qt=no --enable-update-check=no --without-gettext --enable-static=yes \
		--with-boost=$PREFIX --host=$HOST \
	&& rake apps:strip

###################Stage 2: ######################
FROM scratch AS mkvtoolnix

ARG MKVTOOLNIX_BIN

COPY --from=build_i686 /opt/_src/mkvtoolnix/src/$MKVTOOLNIX_BIN /i686/


##################Stage 3: ######################
FROM builder AS build_x86_64

ARG MKVTOOLNIX_BIN

ARG HOST=x86_64-unknown-linux-gnu
#ARG HOST=i686-unknown-linux-gnu
#ARG HOST=i686-w64-mingw32
#ARG HOST=x86_64-w64-mingw32

ARG CFLAGS="-m64 -fstack-protector-strong"
ARG CXXFLAGS="-m64 -fstack-protector-strong"
ARG CPPFLAGS="-D_FILE_OFFSET_BITS=64"
ARG LDFLAGS="-m64 -fstack-protector-strong"

#ARG WINDRES_FLAGS="-F pe-x86-64"
#ARG DLLTOOL_FLAGS="-m i386:x86-64"

#ENV WINDRES "${MINGW32}windres ${WINDRES_FLAGS}"
#ENV RC $WINDRES
#ENV DLLTOOL "${MINGW32}dlltool ${DLLTOOL_FLAGS}"

ARG BUILDROOT=/opt/linux
ARG PREFIX=$BUILDROOT/$HOST-build

ARG PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/

ARG CPPFLAGS="${CPPFLAGS} -I${PREFIX}/include"
ARG LDFLAGS="${LDFLAGS} -L${PREFIX}/lib"

RUN	mkdir -p $PREFIX $PKG_CONFIG_PATH \
\
	&& mkdir -p $BUILDROOT/xz-$XZ_VER && cd $BUILDROOT/xz-$XZ_VER \
	&& $SRC/xz-$XZ_VER/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes \
	&& make -C src/liblzma -j $(($(nproc) + 3)) install \
\
	&& mkdir -p $BUILDROOT/bzip2-$BZIP2_VER && cd $BUILDROOT/bzip2-$BZIP2_VER \
	&& sed -i 's/sys\\stat\.h/sys\/stat\.h/' $SRC/bzip2-$BZIP2_VER/bzip2.c \
	&& make -C $SRC/bzip2-$BZIP2_VER -j $(($(nproc) + 3)) PREFIX=$PREFIX CC=$CC AR=$AR RANLIB=$RANLIB CFLAGS="${CFLAGS} -Wall -Winline -O2 -D_FILE_OFFSET_BITS=64" libbz2.a \
	&& install -d $PREFIX/include $PREFIX/lib && install -m644 $SRC/bzip2-$BZIP2_VER/bzlib.h $PREFIX/include/ && install -m644 $SRC/bzip2-$BZIP2_VER/libbz2.a $PREFIX/lib/ \
\
	&& mkdir -p $BUILDROOT/zlib-$ZLIB_VER && cd $BUILDROOT/zlib-$ZLIB_VER \
	&& $SRC/zlib-$ZLIB_VER/configure --prefix=$PREFIX --static \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/expat-$EXPAT_VER && cd $BUILDROOT/expat-$EXPAT_VER \
	&& $SRC/expat-$EXPAT_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no --without-docbook \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libiconv-$LIBICONV_VER && cd $BUILDROOT/libiconv-$LIBICONV_VER \
	&& $SRC/libiconv-$LIBICONV_VER/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes --enable-shared=no --disable-nls \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& cd $SRC/boost-$BOOST_VER \
	&& echo "using gcc : mingw : ${MINGW32}g++ : <rc>\"$WINDRES\" <archiver>${MINGW32}ar <ranlib>${MINGW32}ranlib <cxxflags>\"${CXXFLAGS}\" <linkflags>\"${LDFLAGS}\" ;" > user-config.jam \
	&& cd tools/build && CXX=g++ CXXFLAGS= LDFLAGS= ./bootstrap.sh \
	&& cd ../../ && ./tools/build/b2 \
        -a \
        -q \
        -j $(($(nproc) + 3)) \
        --ignore-site-config \
        --user-config=user-config.jam \
		-sBOOST_ROOT=$SRC/boost-$BOOST_VER \
        abi=sysv \
        address-model=$([[ "$HOST" =~ "x86_64" ]] && echo "64" || echo "32") \
        architecture=x86 \
        binary-format=$([[ "$HOST" =~ "mingw" ]] && echo "pe" || echo "elf") \
        link=static \
        target-os=$([[ "$HOST" =~ "mingw" ]] && echo "windows" || echo "linux") \
        threadapi=$([[ "$HOST" =~ "mingw" ]] && echo "win32" || echo "pthread") \
        threading=multi \
		runtime-link=static \
        variant=release \
        toolset=gcc-mingw \
        optimization=speed \
        --layout=tagged \
        --disable-icu \
		boost.locale.iconv=on \
        --without-mpi \
        --without-python \
        --prefix=$PREFIX \
        --exec-prefix=$PREFIX/bin \
        --libdir=$PREFIX/lib \
        --includedir=$PREFIX/include \
        -sEXPAT_INCLUDE=$PREFIX/include \
        -sEXPAT_LIBPATH=$PREFIX/lib \
		-sZLIB_INCLUDE=$PREFIX/include \
		-sZLIB_LIBPATH=$PREFIX/lib \
		-sBZIP2_INCLUDE=$PREFIX/include \
		-sBZIP2_LIBPATH=$PREFIX/lib \
		-sLZMA_INCLUDE=$PREFIX/include \
		-sLZMA_LIBPATH=$PREFIX/lib \
		-sICONV_PATH=$PREFIX \
        install \
\
	&& mkdir -p $BUILDROOT/libogg-$OGG_VER && cd $BUILDROOT/libogg-$OGG_VER \
	&& $SRC/libogg-$OGG_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libvorbis-$VORBIS_VER && cd $BUILDROOT/libvorbis-$VORBIS_VER \
	&& $SRC/libvorbis-$VORBIS_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
		--with-ogg=$PREFIX --enable-docs=no \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/flac-$FLAC_VER && cd $BUILDROOT/flac-$FLAC_VER \
	&& $SRC/flac-$FLAC_VER/configure --prefix=$PREFIX --host=$HOST --enable-static=yes --enable-shared=no \
		--enable-ogg --with-ogg=$PREFIX --disable-doxygen-docs --disable-xmms-plugin \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/file-$FILE_VER && cd $BUILDROOT/file-$FILE_VER \
	&& autoreconf -if $SRC/file-$FILE_VER \
	&& CFLAGS="${CFLAGS} -DHAVE_PREAD" LDFLAGS="${LDFLAGS}" $SRC/file-$FILE_VER/configure --prefix=$PREFIX \
	    --host=$HOST --build=$BUILD --enable-static=yes --disable-silent-rules --disable-shared \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/pugixml-$PUGIXML_VER && cd $BUILDROOT/pugixml-$PUGIXML_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX $SRC/pugixml-$PUGIXML_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/fmt-$FMT_VER && cd $BUILDROOT/fmt-$FMT_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX -DFMT_DOC=OFF -DFMT_TEST=OFF $SRC/fmt-$FMT_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libebml-$LIBEBML_VER && cd $BUILDROOT/libebml-$LIBEBML_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DWIN32=OFF -DENABLE_WIN32_IO=OFF -DCMAKE_INSTALL_PREFIX=$PREFIX $SRC/libebml-$LIBEBML_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/libmatroska-$LIBMATROSKA_VER && cd $BUILDROOT/libmatroska-$LIBMATROSKA_VER \
	&& cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX=$PREFIX  -DCMAKE_PREFIX_PATH=$BUILDROOT $SRC/libmatroska-$LIBMATROSKA_VER \
	&& make -j $(($(nproc) + 3)) && make install \
\
	&& mkdir -p $BUILDROOT/gettext-$GETTEXT_VER && cd $BUILDROOT/gettext-$GETTEXT_VER \
	&& $SRC/gettext-$GETTEXT_VER/gettext-runtime/configure --prefix=$PREFIX --host=$HOST --build=$BUILD --enable-static=yes --enable-shared=no --enable-threads=posix \
	&& make -C intl -j $(($(nproc) + 3)) install \
\
	&& cd $SRC/nlohmann-json-$NLOHMANN_VER \
	## Use native C++ compiler to circumvent Meson's sanity check.
	&& CXX=g++ AR=ar STRIP=strip CXXFLAGS= LDFLAGS= meson --prefix=$PREFIX --libdir=lib builddir \
	&& ninja -C builddir install \
\
\
	&& cd $SRC/mkvtoolnix \
	&& ./configure --enable-qt=no --enable-update-check=no --without-gettext --enable-static=yes \
		--with-boost=$PREFIX --host=$HOST \
	&& rake apps:strip

###################Stage 4: ######################
FROM mkvtoolnix

ARG MKVTOOLNIX_BIN

COPY --from=build_x86_64 /opt/_src/mkvtoolnix/src/$MKVTOOLNIX_BIN /x86_64/